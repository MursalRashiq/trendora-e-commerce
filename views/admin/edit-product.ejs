<%- include("../../views/partials/admin/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Trendora Admin</title>

    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/cropperjs/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="shortcut icon" type="image/x-icon" href="/assets/img/logo/logo-removebg-preview.png">

    <style>
        body {
            background-color: #eef2f7;
            font-family: 'Poppins', sans-serif;
            margin: 0;
            overflow-x: hidden; /* Prevent horizontal scrolling */
            display: flex; /* Match header layout */
            min-height: 100vh;
        }

        .dashboard-container {
            flex: 1;
            margin-left: 250px; /* Match sidebar width on laptop/TV */
            width: calc(100% - 250px); /* Adjust for sidebar */
            transition: margin-left 0.3s ease, width 0.3s ease;
            overflow-x: hidden; /* Extra protection */
        }

        .main-content {
            background: #fff;
            padding: clamp(1rem, 3vw, 2rem); /* Responsive padding */
            width: 100%;
            overflow-x: hidden; /* Ensure no horizontal scrolling */
            padding-top: 70px; /* Match header height */
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            min-height: calc(100vh - 70px);
        }

        .content-title {
            font-size: clamp(1.5rem, 5vw, 2.2rem); /* Responsive font */
            color: #34495e;
            font-weight: 600;
            letter-spacing: 1px;
            text-align: center;
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
            text-transform: uppercase;
        }

        .card {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: clamp(1rem, 2vw, 1.5rem);
            transition: all 0.3s ease;
            overflow-x: hidden; /* Prevent card overflow */
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            padding-bottom: clamp(0.75rem, 1.5vw, 1rem);
            border-bottom: 1px solid #edf2f7;
        }

        .card-header h4 {
            margin: 0;
            font-size: clamp(1.2rem, 3vw, 1.5rem); /* Responsive font */
            font-weight: 600;
            color: #34495e;
        }

        .form-label {
            font-weight: 500;
            color: #34495e;
            margin-bottom: 0.5rem;
            font-size: clamp(0.85rem, 2vw, 0.95rem); /* Responsive font */
        }

        .form-control, .form-select {
            width: 100%;
            padding: clamp(6px, 1.5vw, 8px); /* Responsive padding */
            margin-bottom: clamp(0.75rem, 2vw, 1rem);
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: clamp(0.85rem, 2vw, 0.95rem); /* Responsive font */
            transition: all 0.3s ease;
            box-sizing: border-box; /* Include padding in width */
        }

        .form-control:focus, .form-select:focus {
            border-color: #1abc9c;
            box-shadow: 0 0 5px rgba(26, 188, 156, 0.5);
            outline: none;
        }

        .error-message {
            color: #e74c3c;
            font-size: clamp(0.75rem, 1.8vw, 0.85rem); /* Responsive font */
            margin-top: -0.5rem;
            margin-bottom: 0.75rem;
            font-weight: 500;
            word-break: break-word; /* Prevent text overflow */
        }

        .image-container {
            position: relative;
            border: 1px solid #ced4da;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: clamp(0.75rem, 2vw, 1rem);
            background: #fafafa;
            transition: transform 0.3s ease;
            width: 100%;
        }

        .image-container:hover {
            transform: translateY(-5px);
        }

        .product-image {
            width: 100%;
            height: clamp(150px, 25vw, 200px); /* Responsive height */
            object-fit: contain;
            display: block;
            background: #fff;
        }

        .image-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.7);
            color: #fff;
            padding: clamp(4px, 1vw, 6px);
            font-size: clamp(0.75rem, 1.8vw, 0.85rem); /* Responsive font */
            text-align: center;
            word-break: break-word; /* Prevent overflow */
        }

        .delete-image {
            position: absolute;
            top: 8px;
            right: 8px;
            padding: clamp(4px, 1vw, 6px);
            border-radius: 50%;
            background: #e74c3c;
            border: none;
            color: #fff;
            transition: all 0.3s ease;
        }

        .delete-image:hover {
            background: #c0392b;
            transform: scale(1.1);
        }

        .image-upload-container {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: clamp(1rem, 2vw, 1.5rem); /* Responsive gap */
            overflow-x: hidden; /* Prevent overflow */
        }

        .image-upload-row {
            display: flex;
            flex-wrap: wrap; /* Ensure wrapping */
            gap: clamp(1rem, 2vw, 1.5rem);
            align-items: flex-start;
            width: 100%;
        }

        .image-card {
            border: 2px dashed #ced4da;
            padding: clamp(0.75rem, 1.5vw, 1rem);
            border-radius: 10px;
            background: #fafafa;
            width: 100%;
            max-width: 300px; /* Default for desktop */
            text-align: center;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Include padding in width */
            overflow-x: hidden; /* Prevent overflow */
        }

        .image-card:hover {
            border-color: #1abc9c;
        }

        .image-card img {
            max-width: 100%;
            height: auto;
            border-radius: 5px;
            margin-bottom: clamp(0.5rem, 1vw, 0.75rem);
        }

        .image-cropper {
            display: none;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 300px; /* Default for desktop */
            height: clamp(200px, 40vw, 300px); /* Responsive height */
            margin: 0 auto;
            border: 1px solid #ced4da;
            padding: clamp(0.5rem, 1vw, 0.75rem);
            border-radius: 10px;
            background: #fff;
            box-sizing: border-box; /* Include padding in width */
            overflow-x: hidden; /* Prevent overflow */
        }

        .btn {
            padding: clamp(6px, 1.5vw, 8px) clamp(12px, 2vw, 15px); /* Responsive padding */
            border-radius: 5px;
            font-weight: 600;
            font-size: clamp(0.85rem, 2vw, 0.95rem); /* Responsive font */
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            width: 100%; /* Ensure buttons fit container */
            max-width: 200px; /* Limit width */
        }

        .btn-primary {
            background: #1abc9c;
            color: #fff;
        }

        .btn-primary:hover {
            background: #16a085;
            transform: scale(1.05);
            box-shadow: 0 4px 10px rgba(26, 188, 156, 0.3);
        }

        .btn-publish {
            background: #1abc9c;
            color: #fff;
            padding: clamp(8px, 2vw, 12px) clamp(16px, 3vw, 24px);
            font-size: clamp(1rem, 2.5vw, 1.1rem); /* Responsive font */
            width: 100%;
            max-width: 300px;
        }

        .btn-publish:hover {
            background: #16a085;
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(26, 188, 156, 0.4);
        }

        .btn-sm {
            padding: clamp(4px, 1vw, 6px) clamp(8px, 1.5vw, 10px);
            font-size: clamp(0.75rem, 1.8vw, 0.85rem); /* Responsive font */
            max-width: 150px; /* Limit width */
        }

        /* Responsive Adjustments */
        @media (max-width: 992px) {
            .dashboard-container {
                margin-left: 70px; /* Match minimized sidebar width */
                width: calc(100% - 70px); /* Adjust for mobile sidebar */
                position: relative;
                left: 0;
            }
            .main-content {
                padding: clamp(0.75rem, 2vw, 1.5rem);
            }
        }

        @media (max-width: 768px) {
            .image-upload-row {
                flex-direction: column; /* Stack vertically */
                gap: clamp(0.75rem, 1.5vw, 1rem);
            }
            .image-container {
                margin-bottom: clamp(0.5rem, 1vw, 0.75rem);
            }
            .image-card, .image-cropper {
                max-width: 100%; /* Remove fixed max-width */
                width: 100%; /* Full width on mobile */
            }
            .card {
                padding: clamp(0.75rem, 1.5vw, 1rem);
            }
            .btn {
                max-width: 100%; /* Full width buttons */
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: clamp(0.5rem, 1.5vw, 1rem);
                border-radius: 5px;
            }
            .content-title {
                font-size: clamp(1.2rem, 4vw, 1.6rem);
            }
            .form-control, .form-select {
                padding: clamp(5px, 1.2vw, 6px);
                font-size: clamp(0.75rem, 1.8vw, 0.85rem);
            }
            .form-label {
                font-size: clamp(0.75rem, 1.8vw, 0.85rem);
            }
            .btn {
                padding: clamp(5px, 1.2vw, 6px) clamp(10px, 1.8vw, 12px);
                font-size: clamp(0.75rem, 1.8vw, 0.85rem);
            }
            .btn-publish {
                padding: clamp(6px, 1.5vw, 8px) clamp(12px, 2vw, 16px);
                font-size: clamp(0.9rem, 2vw, 1rem);
            }
            .image-container, .image-card, .image-cropper {
                margin-bottom: clamp(0.5rem, 1vw, 0.75rem);
            }
            .product-image {
                height: clamp(120px, 30vw, 150px);
            }
        }

        @media (min-width: 1200px) {
            .main-content {
                padding: clamp(2rem, 3vw, 2.5rem);
            }
            .content-title {
                font-size: 2.2rem;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="main-content">
            <h2 class="content-title">Edit Product</h2>
            <div class="card mb-4">
                <div class="card-body">
                    <form method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" id="productForm">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%= product.productName || '' %>" class="form-control" id="product_name" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Brand and Category Row -->
                        <div class="row">
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select" name="brand" required>
                                    <% for (let i = 0; i < brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>" <%= brand[i].brandName === product.brand ? 'selected' : '' %>>
                                            <%= brand[i].brandName %>
                                        </option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category" required>
                                    <% for(let i = 0; i < cat.length; i++) { %>
                                        <option value="<%= cat[i].name %>" <%= cat[i].name === product.category ? 'selected' : '' %>>
                                            <%= cat[i].name %>
                                        </option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea name="descriptionData" class="form-control" rows="4" required><%= product.description || '' %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Pricing and Quantity -->
                        <div class="row mb-4">
                            <div class="col-lg-4">
                                <label class="form-label">Regular Price (₹)</label>
                                <input name="regularPrice" type="number" step="0.01" min="0" value="<%= product.regularPrice || 0 %>" class="form-control" required>
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4">
                                <label class="form-label">Sale Price (₹)</label>
                                <input name="salePrice" type="number" step="0.01" min="0" value="<%= product.salePrice || 0 %>" class="form-control">
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="number" min="0" value="<%= product.quantity || 0 %>" class="form-control" required>
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>

                        <!-- Color -->
                        <div class="mb-4">
                            <label class="form-label">Color</label>
                            <input name="color" type="text" value="<%= product.color || '' %>" class="form-control" required>
                            <div id="color-error" class="error-message"></div>
                        </div>

                        <!-- Current Images -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Current Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <% if (product && product.productImage && product.productImage.length > 0) { %>
                                        <% product.productImage.forEach((image, index) => { %>
                                            <div class="col-md-3 mb-3">
                                                <div class="image-container">
                                                    <img 
                                                        src="<%= image.startsWith('http') ? image : `https://res.cloudinary.com/dzebuk6wk/image/upload/v1739790922/products/${image}` %>"
                                                        alt="Product image <%= index + 1 %>"
                                                        class="product-image"
                                                        onerror="handleImageError(this)"
                                                    >
                                                    <div class="image-info">
                                                        Image <%= index + 1 %>
                                                    </div>
                                                    <button 
                                                        type="button" 
                                                        class="delete-image"
                                                        data-image="<%= image %>"
                                                        data-product="<%= product._id %>"
                                                        onclick="deleteSingleImage(this)"
                                                    >
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="col-12">
                                            <p class="text-center text-muted">No images available</p>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Add New Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="image-upload-container">
                                    <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="image-upload-row">
                                            <div class="image-card">
                                                <img src="" alt="Preview" id="imgView<%= i %>">
                                                <input class="form-control mt-2" type="file" name="images" id="input<%= i %>" 
                                                       accept="image/png, image/jpeg, image/jpg" 
                                                       onchange="viewImage(event, <%= i %>)">
                                            </div>
                                            <div class="image-cropper" id="cropperContainer<%= i %>">
                                                <img src="" id="croppedImg<%= i %>" alt="Cropped Image">
                                                <button type="button" id="saveButton<%= i %>" class="btn btn-primary btn-sm mt-2">Save Crop</button>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="text-center mt-4">
                            <button class="btn btn-publish" type="submit">Update Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="/assets/cropperjs/cropper.min.js"></script>
    <script>
        let croppers = {};
        let croppedDataUrls = {};

        const CONFIG = {
            maxSizeMB: 5,
            allowedTypes: ['image/jpeg', 'image/jpg', 'image/png'],
            maxWidth: 600,
            maxHeight: 600
        };

        function validateFile(file) {
            const imagesError = document.getElementById('images-error');
            imagesError.textContent = '';
            if (!file) return { valid: false, message: 'No file selected.' };
            if (!CONFIG.allowedTypes.includes(file.type)) {
                return { valid: false, message: 'Only JPG, JPEG, or PNG images are allowed.' };
            }
            if (file.size > CONFIG.maxSizeMB * 1024 * 1024) {
                return { valid: false, message: `File size must be under ${CONFIG.maxSizeMB}MB.` };
            }
            return { valid: true };
        }

        function showError(message) {
            const imagesError = document.getElementById('images-error');
            imagesError.textContent = message;
            imagesError.style.display = 'block';
        }

        function viewImage(event, index) {
            const input = event.target;
            const file = input.files[0];
            const validation = validateFile(file);
            if (!validation.valid) {
                showError(validation.message);
                resetImage(index);
                return;
            }

            const reader = new FileReader();
            reader.onload = function() {
                const image = document.getElementById(`imgView${index}`);
                const croppedImg = document.getElementById(`croppedImg${index}`);
                const cropperContainer = document.getElementById(`cropperContainer${index}`);
                
                croppedImg.src = '';
                image.src = reader.result;
                
                if (croppers[index]) croppers[index].destroy();
                
                croppers[index] = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 0.8,
                    zoomable: true,
                    ready() {
                        cropperContainer.style.display = 'flex';
                    }
                });

                document.getElementById(`saveButton${index}`).onclick = async function() {
                    try {
                        const croppedCanvas = croppers[index].getCroppedCanvas({
                            width: CONFIG.maxWidth,
                            height: CONFIG.maxHeight,
                            imageSmoothingEnabled: true,
                            imageSmoothingQuality: 'high',
                        });

                        if (!croppedCanvas) throw new Error('Could not crop image');
                        const blob = await new Promise(resolve => croppedCanvas.toBlob(resolve, 'image/jpeg', 0.9));
                        if (blob.size > CONFIG.maxSizeMB * 1024 * 1024) {
                            throw new Error(`Cropped image size exceeds ${CONFIG.maxSizeMB}MB`);
                        }

                        const fileName = `cropped-img-${Date.now()}-${index}.jpg`;
                        const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
                        const dataUrl = croppedCanvas.toDataURL('image/jpeg', 0.9);
                        croppedDataUrls[index] = dataUrl;

                        croppedImg.src = dataUrl;
                        croppedImg.style.display = 'block';
                        croppedImg.style.maxWidth = '100%';
                        croppedImg.style.height = 'auto';

                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(croppedFile);
                        document.getElementById(`input${index}`).files = dataTransfer.files;

                        image.style.display = 'none';
                        croppers[index].destroy();
                        croppers[index] = null;
                        cropperContainer.style.display = 'flex';
                        document.getElementById(`saveButton${index}`).style.display = 'none';

                        const resetButton = document.createElement('button');
                        resetButton.textContent = 'Reset Image';
                        resetButton.className = 'btn btn-primary btn-sm mt-2';
                        resetButton.onclick = () => resetImage(index);
                        cropperContainer.appendChild(resetButton);
                    } catch (error) {
                        showError(error.message || 'Error processing image.');
                        resetImage(index);
                    }
                };
            };
            reader.readAsDataURL(file);
        }

        function resetImage(index) {
            const image = document.getElementById(`imgView${index}`);
            const croppedImg = document.getElementById(`croppedImg${index}`);
            const cropperContainer = document.getElementById(`cropperContainer${index}`);
            const input = document.getElementById(`input${index}`);

            image.src = '';
            image.style.display = 'block';
            croppedImg.src = '';
            croppedImg.style.display = 'none';
            cropperContainer.style.display = 'none';
            input.value = '';

            const resetButton = cropperContainer.querySelector('.btn-primary');
            if (resetButton) resetButton.remove();
            document.getElementById(`saveButton${index}`).style.display = 'block';

            delete croppedDataUrls[index];
            if (croppers[index]) {
                croppers[index].destroy();
                croppers[index] = null;
            }
        }

        function deleteSingleImage(button) {
            const imageUrl = button.dataset.image;
            const productId = button.dataset.product;

            Swal.fire({
                title: 'Delete Image?',
                text: "This action cannot be undone",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#1abc9c',
                cancelButtonColor: '#e74c3c',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/admin/deleteImage",
                        method: "POST",
                        data: { imageUrl: imageUrl, productId: productId },
                        success: function(response) {
                            if (response.success) {
                                button.closest('.col-md-3').remove();
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'Image has been deleted.',
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: response.message || 'Failed to delete image',
                                    toast: true,
                                    position: 'top-end'
                                });
                            }
                        },
                        error: function(xhr) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'Failed to delete image. Please try again.',
                                toast: true,
                                position: 'top-end'
                            });
                        }
                    });
                }
            });
        }

        function handleImageError(img) {
            img.onerror = null;
            img.src = '/assets/img/no-image.jpg';
            const infoDiv = img.nextElementSibling;
            if (infoDiv && infoDiv.classList.contains('image-info')) {
                infoDiv.style.color = '#e74c3c';
                infoDiv.textContent = 'Image load failed';
            }
        }

        const regularPriceInput = document.querySelector('input[name="regularPrice"]');
        const salePriceInput = document.querySelector('input[name="salePrice"]');
        const salePriceError = document.getElementById('salePrice-error');

        function validatePrices() {
            const regularPrice = parseFloat(regularPriceInput.value) || 0;
            const salePrice = parseFloat(salePriceInput.value) || 0;
            salePriceError.textContent = '';
            if (salePrice > regularPrice && salePrice > 0) {
                salePriceError.textContent = 'Sale price cannot be greater than regular price';
                return false;
            }
            return true;
        }

        salePriceInput.addEventListener('input', validatePrices);
        regularPriceInput.addEventListener('input', validatePrices);

        document.getElementById('productForm').addEventListener('submit', (e) => {
            if (!validatePrices()) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please correct the sale price before submitting.',
                    toast: true,
                    position: 'top-end'
                });
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.product-image').forEach(img => {
                img.onerror = function() { handleImageError(this); };
            });
        });
    </script>
</body>
</html>
<%- include("../../views/partials/admin/footer") %>