<%- include("../../views/partials/admin/header") %>
<head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/cropperjs/cropper.min.css">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: #f4f7fa;
            margin: 0;
            overflow-x: hidden;
            overflow-y: auto;
        }

        .content-main {
            padding: 4rem;
            max-width: 100%;
            margin: 0 auto;
        }

        .content-title {
            font-size: 2rem;
            font-weight: 600;
            color: #1a3c63;
            letter-spacing: 1px;
            text-align: center;
            margin-bottom: 3rem;
        }

        .card {
            background: #fff;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            padding: 2rem;
            animation: fadeIn 0.8s ease-in;
        }

        .card-header {
            padding-bottom: 1rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .card-header h4 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
            color: #1a3c63;
        }

        .form-label {
            font-weight: 500;
            color: #1a3c63;
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
        }

        .form-control, .form-select {
            width: 100%;
            padding: 0.875rem;
            margin-bottom: 1.25rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: #fff;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #088178;
            box-shadow: 0 0 10px rgba(8, 129, 120, 0.2);
            outline: none;
        }

        .error-message {
            color: #e53e3e;
            font-size: 0.85rem;
            margin-top: -0.75rem;
            margin-bottom: 0.75rem;
            font-weight: 500;
        }

        .image-upload-container {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .image-upload-row {
            display: flex;
            gap: 2rem;
            align-items: flex-start;
            flex-wrap: wrap;
        }

        .image-card {
            border: 2px dashed #e2e8f0;
            padding: 1rem;
            border-radius: 15px;
            background: #fafafa;
            width: 100%;
            max-width: 300px;
            text-align: center;
            transition: border-color 0.3s ease;
        }

        .image-card:hover {
            border-color: #088178;
        }

        .image-card img {
            max-width: 100%;
            height: auto;
            border-radius: 10px;
            margin-bottom: 1rem;
        }

        .image-cropper {
            display: none;
            flex-direction: column;
            align-items: center;
            width: 300px;
            height: 300px;
            margin: 0 auto;
            border: 2px solid #e2e8f0;
            padding: 1rem;
            border-radius: 15px;
            background: #fff;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-primary {
            background: linear-gradient(90deg, #088178, #056b63);
            color: #fff;
        }

        .btn-primary:hover {
            background: linear-gradient(90deg, #056b63, #044e47);
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(8, 129, 120, 0.3);
        }

        .btn-publish {
            background: linear-gradient(90deg, #088178, #056b63);
            color: #fff;
            padding: 1rem 2rem;
            font-size: 1.1rem;
        }

        .btn-publish:hover {
            background: linear-gradient(90deg, #056b63, #044e47);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(8, 129, 120, 0.4);
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .content-main { padding: 2rem; }
            .card { padding: 1.5rem; }
            .image-upload-row { flex-direction: column; gap: 1.5rem; }
            .image-card, .image-cropper { max-width: 100%; }
            .btn-publish { padding: 0.875rem 1.5rem; }
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <!-- Product Name -->
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name" required>
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <!-- Brand and Category Row -->
                            <div class="row">
                                <div class="col-lg-6 mb-4">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand" required>
                                        <% if (brand && brand.length > 0) { %>
                                            <% for (let i = 0; i < brand.length; i++) { %>
                                                <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                            <% } %>
                                        <% } else { %>
                                            <option disabled>No brands available</option>
                                        <% } %>
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category" required>
                                        <% for (let i = 0; i < cat.length; i++) { %>
                                            <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                        <% } %>
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea placeholder="Enter product description" id="descriptionid" name="description" class="form-control" rows="4" required></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <!-- Prices and Quantity Row -->
                            <div class="row">
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label" id="regular">Regular Price (₹)</label>
                                    <input type="number" step="0.01" min="0" name="regularPrice" class="form-control" required>
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label" id="sale">Sale Price (₹)</label>
                                    <input type="number" step="0.01" min="0" name="salePrice" class="form-control">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" min="0" name="quantity" class="form-control" required>
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Color -->
                            <div class="row">
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control" required>
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Image Upload Section -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="image-upload-container">
                                        <% for(let i = 1; i <= 4; i++) { %>
                                            <div class="image-upload-row">
                                                <div class="image-card">
                                                    <img src="" alt="Preview" id="imgView<%= i %>">
                                                    <input class="form-control mt-2" type="file" name="images" id="input<%= i %>" 
                                                           accept="image/png, image/jpeg, image/jpg" 
                                                           onchange="viewImage(event, <%= i %>)" 
                                                           <%= i === 1 ? 'required' : '' %>>
                                                </div>
                                                <div class="image-cropper" id="cropperContainer<%= i %>">
                                                    <img src="" id="croppedImg<%= i %>" alt="Cropped Image">
                                                    <button type="button" id="saveButton<%= i %>" class="btn btn-primary btn-sm mt-2">Save Crop</button>
                                                </div>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Publish Button -->
                            <div class="text-center mt-4">
                                <button class="btn btn-publish" type="submit">Publish Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="/assets/cropperjs/cropper.min.js"></script>
    <script>
        let croppers = {};
        let croppedDataUrls = {};

        const CONFIG = {
            maxSizeMB: 5,
            allowedTypes: ['image/jpeg', 'image/jpg', 'image/png'],
            maxWidth: 600,
            maxHeight: 600
        };

        function validateFile(file) {
            const imagesError = document.getElementById('images-error');
            imagesError.textContent = '';
            if (!file) return { valid: false, message: 'No file selected.' };
            if (!CONFIG.allowedTypes.includes(file.type)) {
                return { valid: false, message: 'Only JPG, JPEG, or PNG images are allowed.' };
            }
            if (file.size > CONFIG.maxSizeMB * 1024 * 1024) {
                return { valid: false, message: `File size must be under ${CONFIG.maxSizeMB}MB.` };
            }
            return { valid: true };
        }

        function showError(message) {
            const imagesError = document.getElementById('images-error');
            imagesError.textContent = message;
            imagesError.style.display = 'block';
        }

        function viewImage(event, index) {
            const input = event.target;
            const file = input.files[0];
            const validation = validateFile(file);
            if (!validation.valid) {
                showError(validation.message);
                resetImage(index);
                return;
            }

            const reader = new FileReader();
            reader.onload = function() {
                const image = document.getElementById(`imgView${index}`);
                const croppedImg = document.getElementById(`croppedImg${index}`);
                const cropperContainer = document.getElementById(`cropperContainer${index}`);
                
                croppedImg.src = '';
                image.src = reader.result;
                
                if (croppers[index]) croppers[index].destroy();
                
                croppers[index] = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 0.8,
                    zoomable: true,
                    ready() {
                        cropperContainer.style.display = 'flex';
                    }
                });

                document.getElementById(`saveButton${index}`).onclick = async function() {
                    try {
                        const croppedCanvas = croppers[index].getCroppedCanvas({
                            width: CONFIG.maxWidth,
                            height: CONFIG.maxHeight,
                            imageSmoothingEnabled: true,
                            imageSmoothingQuality: 'high',
                        });

                        if (!croppedCanvas) throw new Error('Could not crop image');
                        const blob = await new Promise(resolve => croppedCanvas.toBlob(resolve, 'image/jpeg', 0.9));
                        if (blob.size > CONFIG.maxSizeMB * 1024 * 1024) {
                            throw new Error(`Cropped image size exceeds ${CONFIG.maxSizeMB}MB`);
                        }

                        const fileName = `cropped-img-${Date.now()}-${index}.jpg`;
                        const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
                        const dataUrl = croppedCanvas.toDataURL('image/jpeg', 0.9);
                        croppedDataUrls[index] = dataUrl;

                        croppedImg.src = dataUrl;
                        croppedImg.style.display = 'block';
                        croppedImg.style.maxWidth = '100%';
                        croppedImg.style.height = 'auto';

                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(croppedFile);
                        document.getElementById(`input${index}`).files = dataTransfer.files;

                        image.style.display = 'none';
                        croppers[index].destroy();
                        croppers[index] = null;
                        cropperContainer.style.display = 'flex';
                        document.getElementById(`saveButton${index}`).style.display = 'none';

                        const resetButton = document.createElement('button');
                        resetButton.textContent = 'Reset Image';
                        resetButton.className = 'btn btn-primary btn-sm mt-2';
                        resetButton.onclick = () => resetImage(index);
                        cropperContainer.appendChild(resetButton);
                    } catch (error) {
                        showError(error.message || 'Error processing image.');
                        resetImage(index);
                    }
                };
            };
            reader.readAsDataURL(file);
        }

        function resetImage(index) {
            const image = document.getElementById(`imgView${index}`);
            const croppedImg = document.getElementById(`croppedImg${index}`);
            const cropperContainer = document.getElementById(`cropperContainer${index}`);
            const input = document.getElementById(`input${index}`);

            image.src = '';
            image.style.display = 'block';
            croppedImg.src = '';
            croppedImg.style.display = 'none';
            cropperContainer.style.display = 'none';
            input.value = '';

            const resetButton = cropperContainer.querySelector('.btn-primary');
            if (resetButton) resetButton.remove();
            document.getElementById(`saveButton${index}`).style.display = 'block';

            delete croppedDataUrls[index];
            if (croppers[index]) {
                croppers[index].destroy();
                croppers[index] = null;
            }
        }

        const regularPriceInput = document.querySelector('input[name="regularPrice"]');
        const salePriceInput = document.querySelector('input[name="salePrice"]');
        const salePriceError = document.getElementById('salePrice-error');

        function validatePrices() {
            const regularPrice = parseFloat(regularPriceInput.value) || 0;
            const salePrice = parseFloat(salePriceInput.value) || 0;
            salePriceError.textContent = '';
            if (salePrice > regularPrice && salePrice > 0) {
                salePriceError.textContent = 'Sale price cannot be greater than regular price';
                return false;
            }
            return true;
        }

        salePriceInput.addEventListener('input', validatePrices);
        regularPriceInput.addEventListener('input', validatePrices);

        document.getElementById('productForm').addEventListener('submit', (e) => {
            if (!validatePrices()) e.preventDefault();
        });
    </script>
</body>
<%- include("../../views/partials/admin/footer") %>